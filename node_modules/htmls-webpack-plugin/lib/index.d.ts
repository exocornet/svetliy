import webpack = require('webpack');
export interface Assets {
    [k: string]: {
        source: () => string;
        size: () => number;
    };
}
export interface Params {
    entries: string[];
    files: string[];
    jses: string[];
    csses: string[];
    options: Props;
    compilation: webpack.Compilation;
    [k: string]: any;
}
export declare type Render = (src: string, params: Params) => string | Promise<string>;
export declare type GeneralParams = {
    [k: string]: any;
};
export declare type CustomParamsFn = (compilation: webpack.Compilation, compiler: webpack.Compiler) => GeneralParams | Promise<GeneralParams>;
export declare type CustomParams = GeneralParams | CustomParamsFn;
export interface HtmlInfo {
    src: string;
    filename: string | ((source: string, src: string, params: Params) => string);
    render?: Render;
    params?: CustomParams;
    flushOnDev?: boolean | string;
    transformParams?: ParamTransformer;
}
export declare type ParamTransformer = (params: Params) => Params & {
    [k: string]: any;
};
export interface Props {
    htmls: HtmlInfo[];
    render?: Render;
    flushOnDev?: boolean | string;
    publicPath?: string | ((name: string) => string);
    params?: CustomParams;
    beforeEmit?: (compilation: webpack.Compilation, compiler: webpack.Compiler) => void | Promise<void>;
    afterEmit?: (compilation: webpack.Compilation, compiler: webpack.Compiler) => void | Promise<void>;
    transformParams?: ParamTransformer;
}
export default class HtmlsPlugin {
    props: Props;
    constructor(props: Props);
    apply(compiler: webpack.Compiler): void;
}
